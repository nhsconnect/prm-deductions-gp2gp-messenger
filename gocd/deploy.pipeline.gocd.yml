format_version: 4
common:
  plan_certs: &plan_certs
    resources:
      - docker
    artifacts:
      - build:
          source: terraform/certs_deployment.tfplan
          destination: terraform/
    tasks:
      - exec:
          command: /bin/bash
          arguments:
            - -c
            - ./tasks tf_plan_certs create
  deploy_certs: &deploy_certs
    resources:
      - docker
    tasks:
      - fetch:
          stage: plan_certs
          job: plan
          source: terraform/certs_deployment.tfplan
          destination: terraform/
          is_file: yes
      - exec:
          command: /bin/bash
          arguments:
            - -c
            - ./tasks tf_apply_certs
  plan: &plan
    resources:
      - docker
    artifacts:
      - build:
          source: terraform/deployment.tfplan
          destination: terraform/
    tasks:
      - exec:
          command: /bin/bash
          arguments:
            - -c
            - ./tasks tf_plan create
  deploy: &deploy
    resources:
      - docker
    tasks:
      - fetch:
          stage: plan
          job: plan
          source: terraform/deployment.tfplan
          destination: terraform/
          is_file: yes
      - exec:
          command: /bin/bash
          arguments:
            - -c
            - ./tasks tf_apply
      - exec:
          command: /bin/bash
          arguments:
            - -c
            - ./tasks wait_ecs

  common_stages: &common_stages
    - promote_docker_image:
        resources:
          - docker
        clean_workspace: true
        tasks:
          - exec:
              command: /bin/bash
              arguments:
                - -c
                - ./tasks promote_docker_image
    - plan_certs:
        clean_workspace: true
        jobs:
          plan: *plan_certs
    - deploy_certs:
        clean_workspace: true
        jobs:
          deploy: *deploy_certs
    - plan:
        clean_workspace: true
        jobs:
          plan: *plan
    - deploy:
        clean_workspace: true
        jobs:
          deploy: *deploy
    - test:
        clean_workspace: true
        jobs:
          functional:
            resources:
              - docker
            tasks:
              - exec:
                  command: /bin/bash
                  arguments:
                    - -c
                    - ./tasks sanity_check
              - exec:
                  command: /bin/bash
                  arguments:
                    - -c
                    - ./tasks test_functional
          e2e:
            resources:
              - docker
            tasks:
              - exec:
                  command: /bin/bash
                  arguments:
                    - -c
                    - ./tasks test_e2e
pipelines:
  'prm-deductions-gp2gp-adaptor.dev':
    group: deductions
    label_template: '${git[:8]}'
    materials:
      git:
        type: configrepo
        blacklist:
          - docs/**/*.*
      app:
        pipeline: prm-deductions-gp2gp-adaptor
        stage: test_docker
      base_infra:
        pipeline: prm-deductions-infra
        stage: deploy_dev
      mhs:
        pipeline: prm-mhs-infra.dev
        stage: deploy
    environment_variables:
      NHS_ENVIRONMENT: dev
    stages: *common_stages

  'prm-deductions-gp2gp-adaptor.test':
    group: deductions
    label_template: '${git[:8]}'
    materials:
      git:
        type: configrepo
        blacklist:
          - docs/**/*.*
      dev_env:
        # This dependency ensures gp2gp-adaptor is not deployed to test env if
        # the E2E tests did not pass in the dev environment
        pipeline: prm-deductions-gp2gp-adaptor.dev
        stage: test
      base_infra:
        pipeline: prm-deductions-infra
        stage: deploy_test
      mhs:
        pipeline: prm-mhs-infra.test
        stage: deploy
    environment_variables:
      NHS_ENVIRONMENT: test
    stages: *common_stages

  'prm-deductions-gp2gp-adaptor.pre-prod':
    group: deductions
    label_template: '${git[:8]}'
    materials:
      git:
        type: configrepo
        blacklist:
          - docs/**/*.*
      test_env:
        # This dependency ensures gp2gp-adaptor is not deployed to pre-prod env if
        # the E2E tests did not pass in the test environment
        pipeline: prm-deductions-gp2gp-adaptor.test
        stage: test
      base_infra:
        pipeline: prm-deductions-infra
        stage: deploy_pre_prod
      mhs:
        pipeline: prm-mhs-infra.pre-prod
        stage: deploy
    environment_variables:
      NHS_ENVIRONMENT: pre-prod
    stages: *common_stages

  'prm-deductions-gp2gp-adaptor.prod':
    group: deductions
    label_template: '${git[:8]}'
    materials:
      git:
        type: configrepo
        blacklist:
          - docs/**/*.*
      test_env:
        # This dependency ensures gp2gp-adaptor is not deployed to pre-prod env if
        # the E2E tests did not pass in the test environment
        pipeline: prm-deductions-gp2gp-adaptor.pre-prod
        stage: test
      base_infra:
        pipeline: prm-deductions-infra
        stage: deploy_prod
      mhs:
        pipeline: prm-mhs-infra.prod
        stage: deploy
    environment_variables:
      NHS_ENVIRONMENT: prod
    stages:
      - promote_docker_image:
          resources:
            - docker
          clean_workspace: true
          tasks:
            - exec:
                command: /bin/bash
                arguments:
                  - -c
                  - ./tasks promote_docker_image
      - plan_certs:
          clean_workspace: true
          jobs:
            plan: *plan_certs
      - deploy_certs:
          clean_workspace: true
          approval:
            type: manual
            allow_only_on_success: true
          jobs:
            deploy: *deploy_certs
      - plan:
          clean_workspace: true
          jobs:
            plan: *plan
      - deploy:
          clean_workspace: true
          approval:
            type: manual
            allow_only_on_success: true
          jobs:
            deploy: *deploy
      - test:
          clean_workspace: true
          jobs:
            functional:
              resources:
                - docker
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - ./tasks sanity_check

